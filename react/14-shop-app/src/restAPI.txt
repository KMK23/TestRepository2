REST (representational State Transfer) 는 웹 애플리케이션과 웹 서비스의 설계를 위한 아키텍처 스타일이다.
RESTful 애플리케이션은 REST 원칙을 따르는 애플리케이션을 의미한다.

1.자원(Resourece): 
REST 에서는 모든 것이 자원이다. 이 자원은 URL(Uniform Resourece Locator)을 통해서 식별된다==> 
자원은 데이터베이스의 컬렉션(테이블),문서(로우), 또는 비즈니스 객체(DB 백엔드와 통신해서 받을 수 있는 것들)등을 포함 할 수 있다.

2.HTTP 메소드:
REST는 HTTP 메서드를 사용하여 자원을 조작한다.
GET : 자원 조회  (CRUD 중 R)
POST : 자원 생성(혹은 자원을 조회할 때에도 쓸 수 있음) (CRUD 중 C)
DELETE : 자원 삭제 (CRUD 중 D)

PUT : 자원 전체 수정
PATCH: 자원 부분 수정
---CRUD 에서 U 부분----

https://localhost:3000/ 이란 링크에서 https://localhost:3000/users 라고 쓰는거임 이러면 users 라는 정보를 가져올수도 있고 아닐수도 있고
ex) 유저의 전체 정보가져오기 ==>GET /users : 모든 사용자 목록을 가져올수 있음
ex) GET /users/{userId}: 특정한 사용자 정보를 가져온다.
ex) 유저 생성 ==> POST /users : 새로운 사용자를 생성한다.(생성도 있지만 가져오는것도 있음)
ex) PUT /users/{userId} ==> 특정한 사용자의 정보를 전체 수정한다. ==> 링크는 이렇게 보내고. 요청 본문을 보낸다(수정할 데이터를 같이 보낸다고 생각하면 된다.)
ex) PATCH /users/{userId} ==> 특정한 사용자의 정보를 부분(일부) 수정 ==>(수정도 있지만 생성도있음) 
ex) DELETE /users/{userId} ==> 특정한 사용자의 정보를 삭제


3.무상태성(Statelessness):
각 요청은 독립적이야 하면서, 서버에서는 요청간의 상태를 저장하지 않는다.
==> GET을 두번쓰면 한번 해놓은거 저장해서 보내는게 아니라 그냥 두번씩 한다(생각해보면 당연하거임)
모든 필요한 정보는 요청에 포함되어야 한다. 

4.캐시 가능성(Caching):
응답은 캐시 될 수 있어야 하며, 클라이언트는 서버의 응답을 캐시하여 성능을 개선 할 수 있다.
==> 최초 응답 이외의 두번쨰 응답(같은 요구일때) 그건 캐시되어 있음

5.계층화된 시스템(Layered System):
클라이언트는 서버의 직접적인 구현을 알 필요 없이 계층화된 시스템을 통해 자원에 접근한다.
ex) users/{userId}/cart/{cartId} ==> 이런식으로 되어있는

6.일관된 인터페이스(Uniform Interface):
자원에 접근하는 인터페이스는 일관되어야 하며, RESTful API 는 표준화된 인터페이스를 통해 클라이언트와 서버간의 상호작용을 단순화한다.

이렇게 6가지를 RESTful한 어플리케이션이다. 라고함


PATCH 대신 쓰는 axios